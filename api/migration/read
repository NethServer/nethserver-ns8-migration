#!/usr/bin/python

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import subprocess
import simplejson
import os
import fcntl, errno

def get_config(appId):
    bash_command = "/sbin/e-smith/config getjson {}".format(appId)
    process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    if output == "1":
        return None
    else:
        return simplejson.loads(output)

def is_locked(fflag):
    try:
        fcntl.flock(open(fflag), fcntl.LOCK_SH | fcntl.LOCK_NB)
    except IOError as ioex:
        if ioex.errno == errno.EWOULDBLOCK:
            return True
        else:
            pass

    return False

def get_migration_status(app_id):
    if app_id in ['nethserver-webtop5','nethserver-roundcubemail']:
        return get_migration_status('nethserver-mail')

    migrating_flag = "/var/lib/nethserver/nethserver-ns8-migration/%s/bind.env" % app_id
    migrated_flag = "/var/lib/nethserver/nethserver-ns8-migration/%s/migrated" % app_id
    syncing_flag = "/var/lib/nethserver/nethserver-ns8-migration/%s/syncing.lock" % app_id
    if os.path.exists(migrated_flag):
        return "migrated"
    elif is_locked(syncing_flag):
        return "syncing"
    elif os.path.exists(migrating_flag):
        return "migrating"
    else:
        return "not_migrated"

def get_account_provider_info():
    provider = 'ldap'
    ip_addresses = []
    if os.path.isfile('/etc/e-smith/db/configuration/defaults/nsdc/type'):
        provider = 'ad'
        process = subprocess.Popen('/usr/libexec/nethserver/api/nethserver-ns8-migration/migration/ad-helper', stdout=subprocess.PIPE)
        output, error = process.communicate()
        try:
            ip_addresses = simplejson.loads(output)
        except:
            pass

    return {
        "id": "account-provider",
        "provider": provider,
        "ip_addresses": ip_addresses
    }


def get_nextcloud_info():
    if os.path.isfile('/etc/e-smith/db/configuration/defaults/nextcloud/type'):
        config = get_config("nextcloud")
        return {
            "id": "nethserver-nextcloud",
            "name": "Nextcloud",
            "config": config
        }
    else:
        return None


def get_mattermost_info():
    # list Mattermost only if enabled and configured
    config = get_config("mattermost")
    if config and config['props']['status'] == 'enabled' and  config['props']['VirtualHost']:
        return {
            "id": "nethserver-mattermost",
            "name": "Mattermost"
        }
    else:
        return None


def get_webmail_info():
    if os.path.isfile('/etc/e-smith/db/configuration/defaults/roundcubemail/type'):
        return {
            "id": "nethserver-roundcubemail",
            "name": "Webmail"
        }
    else:
        return None


def get_mail_info():
    # list only mail server, not mail relay
    if os.path.isfile('/etc/e-smith/db/configuration/defaults/dovecot/status'):
        return {
            "id": "nethserver-mail",
            "name": "Email"
        }
    else:
        return None


def get_webtop_info():
    if os.path.isfile('/etc/e-smith/db/configuration/defaults/webtop/type'):
        config = get_config("webtop")
        return {
            "id": "nethserver-webtop5",
            "name": "WebTop",
            "config": config
        }
    else:
        return None


def list_apps():
    apps = []
    for app in ['mattermost', 'nextcloud', 'mail', 'webmail', 'webtop']:
        info = globals()["get_%s_info" % app]() # call all functions named get_<app>_info
        if info:
            # add only non-empty apps
            apps.append(info)

    # show account provider as last app
    apps.append(get_account_provider_info())
    return apps


def get_cluster_status():
    bash_command = "/usr/sbin/ns8-action cluster get-cluster-status null"
    process = subprocess.Popen(bash_command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    return simplejson.loads(output)


try:
    input_json = simplejson.load(sys.stdin)
    action = input_json["action"]

    if action == 'listApps':
        apps = list_apps()

        for app in apps:
            app["status"] = get_migration_status(app["id"])

        output = simplejson.dumps({'migration': apps})
        print(output)
    elif action == 'getClusterStatus':
        cluster_status = get_cluster_status()
        output = simplejson.dumps({'clusterStatus': cluster_status})
        print(output)
except Exception as e:
    print simplejson.dumps({'error': "%s" % e})
    sys.exit(1)

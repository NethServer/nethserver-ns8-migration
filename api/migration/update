#!/bin/bash

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

. /usr/libexec/nethserver/api/lib/helper_functions

set_migration_status() {
    app_id=$1
    status=$2
    echo "{ \"status\": \"$status\" }" >"/var/lib/nethserver/agent/state/${app_id}.mstatus.json"
}

echo '{"progress":"0.00","time":"0.0","exit":0,"event":"migration-sync","state":"running","step":0,"pid":0,"action":""}'

# read json from stdin
data=$(cat /dev/stdin)

app_id=$(echo $data | jq -r '.app')
action=$(echo $data | jq -r '.action')
migration_config=$(echo $data | jq -r '.migrationConfig')

apps_path="/usr/share/nethesis/nethserver-ns8-migration/apps"
if [[ ! -x "${apps_path}/${app_id}/export" ]] || [[ ! -x "${apps_path}/${app_id}/migrate" ]]; then
    echo '{"pid":0,"status":"failed","event":"migration-sync"}'
    error "ApiFailed" "Unknown app ID $app_id"
fi

if [ "$action" == "start" ] || [ "$action" == "sync" ]; then
    set_migration_status "$app_id" "syncing"

    echo "$migration_config" | "${apps_path}/${app_id}/export" &>>/var/log/ns8-migration.log

    if [ $? -gt 0 ]; then
        set_migration_status "$app_id" "migrating"
        echo '{"pid":0,"status":"failed","event":"migration-sync"}'
        error "ApiFailed" "${apps_path}/${app_id}/export failed"
    fi

    set_migration_status "$app_id" "migrating"
elif [[ "$action" == "finish" ]]; then
    set_migration_status "$app_id" "syncing"

    # if needed, pass additional migration configurations to migrate script (e.g. virtual host for webapps, IP address for AD)
    echo "$migration_config" | "${apps_path}/${app_id}/migrate" &>>/var/log/ns8-migration.log
    if [ $? -gt 0 ]; then
        set_migration_status "$app_id" "migrating"
        echo '{"pid":0,"status":"failed","event":"migration-sync"}'
        error "ApiFailed" "${apps_path}/${app_id}/migrate failed"
    fi

    set_migration_status "$app_id" "migrated"

    # It is possible to migrate the account provider only as the last
    # module. After it has been successfully migrated, disconnect from the
    # cluster.
    if [[ "${app_id}" == "account-provider" ]]; then
        if ! /usr/sbin/ns8-leave; then
            error "EventFailed" "See /var/log/messages"
        fi
    fi
fi

echo '{"progress":"1.00","time":"0.0","exit":0,"event":"migration-sync","state":"done","step":0,"pid":0,"action":""}'
echo '{"pid":0,"status":"success","event":"migration-sync"}'
success

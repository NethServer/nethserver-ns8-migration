#!/bin/bash

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

. /usr/libexec/nethserver/api/lib/helper_functions

set_migration_status() {
    app_id=$1
    status=$2
    echo "{ \"status\": \"$status\" }" >/var/lib/nethserver/agent/${app_id}_ns8_migration
}

echo '{"progress":"0.00","time":"0.0","exit":0,"event":"migrate-data","state":"running","step":0,"pid":0,"action":""}'

# read json from stdin
data=$(cat /dev/stdin)

app_id=$(echo $data | jq -r '.app')
action=$(echo $data | jq -r '.action')
migration_config=$(echo $data | jq -r '.migrationConfig')

app=""
if [[ "$app_id" == "account-provider" ]]; then
    app="ldapproxy"
elif [[ "$app_id" == "nethserver-nextcloud" ]]; then
    app="nextcloud"
elif [[ "$app_id" == "nethserver-mattermost" ]]; then
    app="mattermost"
else
    echo '{"pid":0,"status":"failed","event":"migrate-data"}'
    error "ApiFailed" "Unknown app ID $app_id"
fi

if [ "$action" == "start" ] || [ "$action" == "sync" ]; then
    set_migration_status $app_id "syncing"

    /usr/share/nethesis/nethserver-ns8-migration/apps/$app/export &>>/var/log/ns8-migration.log
    if [ $? -gt 0 ]; then
        set_migration_status $app_id "migrating"
        echo '{"pid":0,"status":"failed","event":"migrate-data"}'
        error "ApiFailed" "/usr/share/nethesis/nethserver-ns8-migration/apps/$app/export failed"
    fi

    set_migration_status $app_id "migrating"
elif [[ "$action" == "finish" ]]; then
    set_migration_status $app_id "syncing"

    # if needed, pass additional migration configurations to migrate script (e.g. virtual host for webapps, IP address for AD)
    echo "$migration_config" | /usr/share/nethesis/nethserver-ns8-migration/apps/$app/migrate &>>/var/log/ns8-migration.log
    if [ $? -gt 0 ]; then
        set_migration_status $app_id "migrating"
        echo '{"pid":0,"status":"failed","event":"migrate-data"}'
        error "ApiFailed" "/usr/share/nethesis/nethserver-ns8-migration/apps/$app/migrate failed"
    fi

    if [[ "$app_id" != "account-provider" ]]; then
        # uninstall app
        output=$(echo "{\"action\": \"list-removed\", \"packages\": [\"$app_id\"]}" | /usr/libexec/nethserver/api/system-packages/read)
        packages=$(echo $output | jq -r '.packages')

        echo "{\"action\": \"remove\", \"packages\": $packages}" | /usr/libexec/nethserver/api/system-packages/update
        if [ $? -gt 0 ]; then
            set_migration_status $app_id "migrating"
            echo '{"pid":0,"status":"failed","event":"migrate-data"}'
            error "ApiFailed" "/usr/libexec/nethserver/api/system-packages/update failed"
        fi

        js_array=$(echo $packages | jq -r ".[]")
        # define bash array
        declare -a packages_arr=($js_array)

        for package in "${packages_arr[@]}"; do
            # remove pin and shortcut of uninstalled packages
            echo "{\"action\": \"remove-pin\", \"name\": \"$package\"}" | /usr/libexec/nethserver/api/system-apps/update
            echo "{\"action\": \"remove-shortcut\", \"name\": \"$package\"}" | /usr/libexec/nethserver/api/system-apps/update
        done

    fi

    set_migration_status $app_id "migrated"
fi

echo '{"progress":"1.00","time":"0.0","exit":0,"event":"migrate-data","state":"done","step":0,"pid":0,"action":""}'
echo '{"pid":0,"status":"success","event":"migrate-data"}'
success

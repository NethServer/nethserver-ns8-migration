#!/usr/bin/python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import time
import sys
import subprocess
import argparse
import json
import hashlib
import uuid
from urllib import request, parse

def call(api_endpoint, token, agent, action, data):

    jdata = json.dumps({"action": action, "data": data, "extra": {
                       "title": action}}).encode('utf8')
    req = request.Request(f'{api_endpoint}/api/{agent}/tasks', data=jdata)
    req.add_header('Content-Type', 'application/json')
    req.add_header('Authorization', f'Bearer {token}')
    post = request.urlopen(req)
    post_response = json.loads(post.read())

    # wait for the cluster queue to grab the request
    time.sleep(0.5)
    if post_response["code"] == 201:
        get_response = {"code": 201}
        task_id = post_response["data"]["id"]

        # wait until the response is ready
        watchdog = 0
        while get_response["code"] == 201:
            if watchdog >= 300:
                print("No server response", file=sys.stderr)
                sys.exit(1)
            try:
                req = request.Request(f'{api_endpoint}/api/{agent}/task/{task_id}/status')
                req.add_header('Content-Type', 'application/json')
                req.add_header('Authorization', f'Bearer {token}')
                get = request.urlopen(req)
                get_response = json.loads(get.read())
            except:
                time.sleep(1)
                pass
            finally:
                watchdog = watchdog + 1

        return get_response

    return None


parser = argparse.ArgumentParser()
parser.add_argument('-A', '--attach', default=False, action='store_true', help="return the remote action exit code and output")
parser.add_argument('agent', default="cluster")
parser.add_argument('action')
parser.add_argument('data')

args = parser.parse_args()

# Load config from config DB
config = json.loads(subprocess.check_output(['/sbin/e-smith/config', 'getjson', 'ns8']))

# Prepare login credentials
loginobj = {
    "username": config['props']['User'],
    "password": config['props']['Password'],
}
data=json.dumps(loginobj).encode('utf8')

api_endpoint = 'http://' + config["props"]["LeaderIpAddress"] + ':9311'

# POST login request
req = request.Request(f'{api_endpoint}/api/login', data=data)
req.add_header('Content-Type', 'application/json')
resp = request.urlopen(req)

payload = json.loads(resp.read())

# Execute action
ret = call(api_endpoint, payload['token'], args.agent, args.action, json.loads(args.data))

if args.attach:
    json.dump(ret['data']['output'], fp=sys.stdout)
    sys.stderr.write(ret['data']['error'])
    sys.exit(int(ret['data']['exit_code']))
else:
    print(json.dumps(ret))

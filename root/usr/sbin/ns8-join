#!/usr/bin/python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import time
import ssl
import sys
import subprocess
import argparse
import json
import hashlib
import uuid
from urllib import request, parse

def call(api_endpoint, action, token, data, tlsverify):
    # Prepare SSL context
    ctx = ssl.create_default_context()
    if not tlsverify:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    
    jdata = json.dumps({"action": action, "data": data, "extra": {
                       "title": action}}).encode('utf8')
    req = request.Request(f'{api_endpoint}/api/cluster/tasks', data=jdata)
    req.add_header('Content-Type', 'application/json')
    req.add_header('Authorization', f'Bearer {token}')
    post = request.urlopen(req, context=ctx)
    post_response = json.loads(post.read())

    # wait for the cluster queue to grab the request
    time.sleep(0.5)
    if post_response["code"] == 201:
        get_response = {"code": 201}
        task_id = post_response["data"]["id"]

        # wait until the response is ready
        watchdog = 0
        while get_response["code"] == 201:
            if watchdog >= 30:
                print("No server response", file=sys.stderr)
                sys.exit(1)
            try:
                req = request.Request(f'{api_endpoint}/api/cluster/task/{task_id}/status')
                req.add_header('Content-Type', 'application/json')
                req.add_header('Authorization', f'Bearer {token}')
                get = request.urlopen(req, context=ctx)
                get_response = json.loads(get.read())
            except:
                time.sleep(5)
                pass
            finally:
                watchdog = watchdog + 1

        return get_response

    return None


parser = argparse.ArgumentParser()
parser.add_argument('host')
parser.add_argument('username', default="admin")
parser.add_argument('password', default="Nethesis,1234")
parser.add_argument('--no-tlsverify', dest='tlsverify', action='store_false', default=True)

args = parser.parse_args()

# Prepare login credentials
loginobj = {
    "username": args.username,
    "password": args.password,
}
data=json.dumps(loginobj).encode('utf8')

# Prepare SSL context
ctx = ssl.create_default_context()
if not args.tlsverify:
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

api_endpoint = f'https://{args.host}/cluster-admin'

# POST login request
req = request.Request(f'{api_endpoint}/api/login', data=data)
req.add_header('Content-Type', 'application/json')
resp = request.urlopen(req, context=ctx)

payload = json.loads(resp.read())

# Retrieve account provider information
account_provider_json = subprocess.check_output(['/usr/sbin/account-provider-test', 'dump'], encoding='utf-8')
account_provider_config = json.loads(account_provider_json)

# Prepare arguments for add-node
priv_key = subprocess.check_output(['/sbin/e-smith/config', 'getprop', 'wg-quick@wg0', 'SecretKey']).decode('ASCII').rstrip()
pub_key = subprocess.check_output(['wg', 'pubkey'], input=priv_key.encode('ASCII')).decode('ASCII').rstrip()
node_pw = str(uuid.uuid4())
node_pwh = hashlib.sha256(node_pw.encode('ASCII')).hexdigest()
data = {
    "node_pwh": node_pwh,
    "public_key": pub_key,
    "endpoint": "",
    "flags": ["nomodules"]
}
# Execute add-node
ret = call(api_endpoint, "add-node", payload['token'], data, args.tlsverify)

if not ret['code'] == 200:
    print("Request has failed: {}".format(ret), file=sys.stderr)
    sys.exit(1)

if not ret['data']['exit_code'] == 0:
    print("Task has failed: {}".format(ret['data']), file=sys.stderr)
    sys.exit(1)

ret = ret['data']['output']

# Save config inside config db
subprocess.run(["/sbin/e-smith/config", "setprop", "wg-quick@wg0", "Address", ret["ip_address"], "RemoteEndpoint", ret["leader_endpoint"], "RemoteKey", ret["leader_public_key"], "RemoteNetwork", ret['network'], "status", "enabled"], check=True)
subprocess.run(["/sbin/e-smith/config", "setprop", "agent", "status", "enabled"], check=True)
subprocess.run(["/sbin/e-smith/config", "setprop", "ns8", "Host", args.host, "User", args.username, "Password", args.password, "TLSVerify", "enabled" if args.tlsverify else "disabled", "LeaderIpAddress", ret['leader_ip_address']], check=True)

# Save agent environment
with open('/var/lib/nethserver/nethserver-ns8-migration/agent.env', 'w') as fp:
    fp.write(f"REDIS_ADDRESS={ret['leader_ip_address']}:6379\n")
    fp.write(f"AGENT_ID=node/{ret['node_id']}\n")
    fp.write(f"REDIS_USER=node/{ret['node_id']}\n")
    fp.write(f"REDIS_PASSWORD={node_pw}\n")

with open('/var/lib/nethserver/nethserver-ns8-migration/environment', 'w') as fp:
    fp.write(f"NODE_ID={ret['node_id']}\n")

# Start the VPN on device wg0
subprocess.run(['/sbin/e-smith/signal-event', '-j', 'nethserver-ns8-migration-save'], check=True)

# Endpoint switch: pass through the VPN
api_endpoint = f"http://{ret['leader_ip_address']}:9311"

#
# Configure NS7 local account provider as external user domain provider in NS8
#

if account_provider_config['isAD'] == '1':
    sssd_props_json = subprocess.check_output(['/sbin/e-smith/config', 'printjson', 'sssd'], encoding='utf-8')
    account_provider_domain = json.loads(sssd_props_json)['props']['Realm'].lower()
    try:
        # If the account provider is AD, assume it is local and try to get nsdc IP address, otherwise skip.
        nsdc_props_json = subprocess.check_output(['/sbin/e-smith/config', 'printjson', 'nsdc'], encoding='utf-8')
        nsdc_ip_address = json.loads(nsdc_props_json)['props']['IpAddress']
    except:
        pass # Ignore missing nsdc/IpAddress prop
    else:
        # Push a route to reach NSDC IP address through the cluster VPN
        update_routes_request = {"add": [{"ip_address": nsdc_ip_address, "node_id": ret['node_id']}]}
        update_routes_response = call(api_endpoint, "update-routes", payload['token'], update_routes_request, False)
        if update_routes_response['data']['exit_code'] != 0:
            print("Task update_routes has failed:", update_routes_response, file=sys.stderr)
            sys.exit(1)
        # Update nsdc route for wireguard VPN
        subprocess.run(['/sbin/e-smith/expand-template', '/var/lib/machines/nsdc/etc/systemd/network/green.network'], check=True)
        subprocess.run(['systemctl', '-M', 'nsdc', 'restart', 'systemd-networkd'], check=True)
        # Configure NSDC as account provider of an external user domain:
        add_external_domain_request = {
            "domain": account_provider_domain,
            "protocol": "ldap",
            "host": nsdc_ip_address,
            "port": account_provider_config['port'],
            "schema": 'ad',
            "bind_dn": account_provider_config['BindDN'],
            "bind_password": account_provider_config['BindPassword'],
            "base_dn": account_provider_config['BaseDN'],
            "tls": True,
            "tls_verify": False,
        }
        add_external_domain_response = call(api_endpoint, "add-external-domain", payload['token'], add_external_domain_request, False)
        if add_external_domain_response['data']['exit_code'] != 0:
            print("Task add_external_domain has failed:", add_external_domain_response, file=sys.stderr)
            sys.exit(1)
        with open('/var/lib/nethserver/nethserver-ns8-migration/environment', 'a') as fp:
            fp.write(f"USER_DOMAIN={account_provider_domain}\n")

elif account_provider_config['isLdap'] == '1' and '127.0.0.1' in account_provider_config['LdapURI']:
    # Configure OpenLDAP as account provider of an external user domain:
    account_provider_domain = "directory.nh"
    add_external_domain_request = {
        "domain": account_provider_domain,
        "protocol": "ldap",
        "host": ret["ip_address"],
        "port": 636,
        "schema": 'rfc2307',
        "bind_dn": account_provider_config['BindDN'],
        "bind_password": account_provider_config['BindPassword'],
        "base_dn": account_provider_config['BaseDN'],
        "tls": True,
        "tls_verify": False,
    }
    add_external_domain_response = call(api_endpoint, "add-external-domain", payload['token'], add_external_domain_request, False)
    if add_external_domain_response['data']['exit_code'] != 0:
        print("Task add_external_domain has failed:", add_external_domain_response, file=sys.stderr)
        sys.exit(1)
    with open('/var/lib/nethserver/nethserver-ns8-migration/environment', 'a') as fp:
        fp.write(f"USER_DOMAIN={account_provider_domain}\n")
